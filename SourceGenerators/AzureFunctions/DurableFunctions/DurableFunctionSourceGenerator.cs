using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;
using System.Collections.Generic;
using System.Text;

namespace SourceGenerators.AzureFunctions.DurableFunctions
{
    [Generator]
    public class DurableFunctionSourceGenerator : ISourceGenerator
    {
        public void Initialize(GeneratorInitializationContext context)
        {
            //if (!System.Diagnostics.Debugger.IsAttached)
            //{
            //    System.Diagnostics.Debugger.Launch();
            //}

            context.RegisterForSyntaxNotifications(() => new DurableTaskSyntaxContextReceiver());
        }

        public void Execute(GeneratorExecutionContext context)
        {
            if (context.SyntaxContextReceiver is not DurableTaskSyntaxContextReceiver receiver)
            {
                return;
            }

            if (receiver.DurableFunctions.Count == 0)
            {
                return;
            }

            var sourceBuilder = new StringBuilder();
            sourceBuilder.Append(@"// <auto-generated>
#nullable enable

using System;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.DurableTask;
using Microsoft.DurableTask.Client;

namespace Microsoft.DurableTask
{
    public static class GeneratedDurableTaskExtensions
    {");

            foreach (var function in receiver.DurableFunctions)
            {
                if (function.Kind == DurableFunctionKind.Orchestration)
                {
                    AddScheduleNewOrchestrationInstance(sourceBuilder, function);
                    AddCallSubOrchestrator(sourceBuilder, function);
                }
                else if (function.Kind == DurableFunctionKind.Activity)
                {
                    AddCallActivity(sourceBuilder, function);
                }
            }

            sourceBuilder.Append(@"
    }
}");

            context.AddSource("GeneratedDurableTaskExtensions.cs", SourceText.From(sourceBuilder.ToString(), Encoding.UTF8, SourceHashAlgorithm.Sha256));
        }

        private static void AddScheduleNewOrchestrationInstance(StringBuilder sourceBuilder, DurableFunction function)
        {
            sourceBuilder.Append($@"
        public static async Task<string> ScheduleNewOrchestrationInstance{function.Name}Async(this DurableTaskClient client{(function.Parameter != null ? $", {function.Parameter.Type} {function.Parameter.Name}" : string.Empty)}, StartOrchestrationOptions? options = null, CancellationToken cancellation = default)
        {{
            return await client.ScheduleNewOrchestrationInstanceAsync(""{function.Name}""{(function.Parameter != null ? $", {function.Parameter.Name}" : string.Empty)}, options, cancellation);
        }}
");
        }

        private static void AddCallSubOrchestrator(StringBuilder sourceBuilder, DurableFunction function)
        {
            sourceBuilder.Append($@"
        public static async Task{(function.ReturnType != null ? $"<{function.ReturnType}>" : string.Empty)} CallSubOrchestrator{function.Name}Async(this TaskOrchestrationContext context{(function.Parameter != null ? $", {function.Parameter.Type} {function.Parameter.Name}" : string.Empty)}, TaskOptions? options = null)
        {{
            {(function.ReturnType != null ? "return " : string.Empty)}await context.CallSubOrchestratorAsync{(function.ReturnType != null ? $"<{function.ReturnType}>" : string.Empty)}(""{function.Name}""{(function.Parameter != null ? $", {function.Parameter.Name}" : string.Empty)}, options);
        }}
");
        }

        private static void AddCallActivity(StringBuilder sourceBuilder, DurableFunction function)
        {
            sourceBuilder.Append($@"
        public static async Task{(function.ReturnType != null ? $"<{function.ReturnType}>" : string.Empty)} CallActivity{function.Name}Async(this TaskOrchestrationContext context{(function.Parameter != null ? $", {function.Parameter.Type} {function.Parameter.Name}" : string.Empty)}, TaskOptions? options = null)
        {{
            {(function.ReturnType != null ? "return " : string.Empty)}await context.CallActivityAsync{(function.ReturnType != null ? $"<{function.ReturnType}>" : string.Empty)}(""{function.Name}""{(function.Parameter != null ? $", {function.Parameter.Name}" : string.Empty)}, options);
        }}
");
        }

        private class DurableTaskSyntaxContextReceiver : ISyntaxContextReceiver
        {
            private readonly List<DurableFunction> _durableFunctions = [];

            public IReadOnlyList<DurableFunction> DurableFunctions => _durableFunctions;

            public void OnVisitSyntaxNode(GeneratorSyntaxContext context)
            {
                if (context.Node is MethodDeclarationSyntax method &&
                    DurableFunction.TryParse(context.SemanticModel, method, out DurableFunction? function) &&
                    function != null)
                {
                    _durableFunctions.Add(function);
                    return;
                }
            }
        }
    }
}
